#include <Wire.h>
#include <Adafruit_MCP4725.h>
#define voltsIn A0

/////////////////////////
float my_bpm = 400.f;
int cstart = 0;
int clength = 2000;
////////////////////////

float co2[] = {315.7,317.45,317.51,315.86,314.93,313.21,313.33,314.67,315.58,316.48,316.65,317.72,318.29,318.15,316.54,314.8,313.84,313.33,314.81,315.58,316.43,316.98,317.58,319.03,320.04,319.59,318.18,315.9,314.17,313.83,315,316.19,316.9,317.7,318.54,319.48,320.58,319.77,318.57,316.79,314.99,315.31,316.1,317.01,317.94,318.55,319.68,320.57,321.02,320.62,319.61,317.4,316.25,315.42,316.69,317.7,318.74,319.07,319.86,321.38,322.25,321.48,319.74,317.77,316.21,315.99,317.07,318.35,319.57,-99.99,-99.99,-99.99,322.26,321.89,320.44,318.69,316.7,316.87,317.68,318.71,319.44,320.44,320.89,322.14,322.17,321.87,321.21,318.87,317.81,317.3,318.87,319.42,320.62,321.6,322.39,323.7,324.08,323.75,322.38,320.36,318.64,318.1,319.78,321.03,322.33,322.5,323.04,324.42,325,324.09,322.54,320.92,319.25,319.39,320.73,321.96,322.57,323.15,323.89,325.02,325.57,325.36,324.14,322.11,320.33,320.25,321.32,322.89,324,324.42,325.63,326.66,327.38,326.71,325.88,323.66,322.38,321.78,322.85,324.12,325.06,325.98,326.93,328.14,328.08,327.67,326.34,324.69,323.1,323.06,324.01,325.13,326.17,326.68,327.17,327.79,328.92,328.57,327.36,325.43,323.36,323.56,324.8,326.01,326.77,327.63,327.75,329.73,330.07,329.09,328.04,326.32,324.84,325.2,326.5,327.55,328.55,329.56,330.3,331.5,332.48,332.07,330.87,329.31,327.51,327.18,328.16,328.64,329.35,330.71,331.48,332.65,333.09,332.25,331.18,329.39,327.43,327.37,328.46,329.57,330.4,331.4,332.04,333.31,333.97,333.6,331.9,330.06,328.56,328.34,329.49,330.76,331.75,332.56,333.5,334.58,334.88,334.33,333.05,330.94,329.3,328.94,330.31,331.68,332.93,333.42,334.7,336.07,336.75,336.27,334.92,332.75,331.59,331.16,332.4,333.85,334.97,335.38,336.64,337.76,338.01,337.89,336.54,334.68,332.76,332.55,333.92,334.95,336.23,336.76,337.96,338.88,339.47,339.29,337.73,336.09,333.92,333.86,335.29,336.73,338.01,338.36,340.07,340.77,341.47,341.17,339.56,337.6,335.88,336.02,337.1,338.21,339.24,340.48,341.38,342.5,342.91,342.25,340.49,338.43,336.69,336.86,338.36,339.61,340.75,341.61,342.7,343.57,344.14,343.35,342.06,339.81,337.98,337.86,339.26,340.49,341.38,342.52,343.1,344.94,345.76,345.32,343.98,342.38,339.87,339.99,341.15,342.99,343.7,344.5,345.28,347.06,347.43,346.8,345.39,343.28,341.07,341.35,342.98,344.22,344.97,345.99,347.42,348.35,348.93,348.25,346.56,344.67,343.09,342.8,344.24,345.56,346.3,346.95,347.85,349.55,350.21,349.55,347.94,345.9,344.85,344.17,345.66,346.9,348.02,348.48,349.42,350.99,351.85,351.26,349.51,348.1,346.45,346.36,347.81,348.96,350.43,351.73,352.22,353.59,354.22,353.79,352.38,350.43,348.73,348.88,350.07,351.34,352.76,353.07,353.68,355.42,355.67,355.12,353.9,351.67,349.8,349.99,351.3,352.52,353.66,354.7,355.38,356.2,357.16,356.23,354.81,352.91,350.96,351.18,352.83,354.21,354.72,355.75,357.16,358.6,359.34,358.24,356.17,354.02,352.15,352.21,353.75,354.99,355.99,356.72,357.81,359.15,359.66,359.25,357.02,355,353.01,353.31,354.16,355.4,356.7,357.17,358.38,359.46,360.28,359.6,357.57,355.52,353.69,353.99,355.34,356.8,358.37,358.91,359.97,361.26,361.69,360.94,359.55,357.48,355.84,356,357.58,359.04,359.97,361,361.63,363.45,363.8,363.26,361.89,359.45,358.05,357.75,359.56,360.7,362.05,363.24,364.02,364.71,365.41,364.97,363.65,361.48,359.45,359.61,360.76,362.33,363.18,363.99,364.56,366.36,366.8,365.63,364.47,362.5,360.19,360.78,362.43,364.28,365.33,366.15,367.31,368.61,369.3,368.88,367.64,365.78,363.9,364.23,365.46,366.97,368.15,368.87,369.59,371.14,371,370.35,369.27,366.93,364.64,365.13,366.68,368,369.14,369.46,370.51,371.66,371.83,371.69,370.12,368.12,366.62,366.73,368.29,369.53,370.28,371.5,372.12,372.86,374.02,373.31,371.62,369.55,367.96,368.09,369.68,371.24,372.44,373.08,373.52,374.85,375.55,375.4,374.02,371.48,370.7,370.25,372.08,373.78,374.68,375.62,376.11,377.65,378.35,378.13,376.61,374.48,372.98,373,374.35,375.69,376.79,377.36,378.39,380.5,380.62,379.55,377.76,375.83,374.05,374.22,375.84,377.44,378.34,379.61,380.08,382.05,382.24,382.08,380.67,378.67,376.42,376.8,378.31,379.96,381.37,382.02,382.56,384.37,384.92,384.03,382.28,380.48,378.81,379.06,380.14,381.66,382.58,383.71,384.34,386.23,386.41,385.87,384.45,381.84,380.86,380.86,382.36,383.61,385.07,385.84,385.83,386.77,388.51,388.05,386.25,384.08,383.09,382.78,384.01,385.11,386.65,387.12,388.52,389.57,390.16,389.62,388.07,386.08,384.65,384.33,386.05,387.49,388.55,390.07,391.01,392.38,393.22,392.24,390.33,388.52,386.84,387.16,388.67,389.81,391.3,391.92,392.45,393.37,394.28,393.69,392.59,390.21,389,388.93,390.24,391.8,393.07,393.35,394.36,396.43,396.87,395.88,394.52,392.54,391.13,391.01,392.95,394.34,395.61,396.85,397.26,398.35,399.98,398.87,397.37,395.41,393.39,393.7,395.19,396.82,397.92,398.1,399.47,401.33,401.88,401.31,399.07,397.21,395.4,395.65,397.23,398.79,399.85,400.31,401.51,403.45,404.1,402.88,401.61,399,397.5,398.28,400.24,401.89,402.65,404.16,404.85,407.57,407.66,407,404.5,402.24,401.01,401.5,403.64,404.55,406.07,406.64,407.06,408.95,409.91,409.12,407.2,405.24,403.27,403.64,405.17,406.75,408.05,408.34,409.25,410.3,411.3,410.88,408.9,407.1,405.59,405.99,408.12,409.23,410.92,411.66};
// c02 measurements from the Mauna Loa Observatory, 1958 - present
int array_length = 0;

Adafruit_MCP4725 dac; // constructor


void setup(void) {
  Serial.begin(9600);
  dac.begin(0x60); // The I2C Address: Run the I2C Scanner if you're not sure  
  array_length = sizeof(co2)/sizeof(float);
}

int bpm_time (float bpm) {
  return int((60./bpm)*1000. + 0.5);
}

int trigger_pattern (int count) {
    int result = 0;
    int cycle0 = 1 << 0;
    int cycle1 = 1 << 1;
    int cycle2 = 1 << 2;
    int cycle3 = 1 << 3;
    int cycle4 = 1 << 4;
    int cycle5 = 1 << 5;
    int cycle6 = 1 << 6;
    int cycle7 = 1 << 7;
    
    if (count % 1 == 0)
        result |= cycle0;
    if (count % 2 == 0)
        result |= cycle1;
    if (count % 3 == 0)
        result |= cycle2;
    if (count % 5 == 0)
        result |= cycle3;
    if (count % 7 == 0)
        result |= cycle4;
    if (count % 11 == 0)
        result |= cycle5;
    if (count % 13 == 0)
        result |= cycle6;
    if (count % 17 == 0)
        result |= cycle7;
    
    return result;
}

int trigger_pattern2 (int count) {
    int result = 0;
      
    if (count % 1 == 0)
        result += 100;
    if (count % 2 == 0)
        result += 200;
    if (count % 3 == 0)
        result += 300;
    if (count % 5 == 0)
        result += 400;
    if (count % 7 == 0)
        result += 500;
    if (count % 11 == 0)
        result += 600;
    if (count % 13 == 0)
        result += 700;
    if (count % 17 == 0)
        result += 800;
    
    return result;
}

void loop(void) {
  
    uint32_t dac_value;
    
    for (int i = cstart; i < clength; i++){

      
      dac.setVoltage(trigger_pattern2 (i)*1, false);

      //dac.setVoltage(co2[i%array_length], false);
      
      delay (bpm_time (my_bpm));  
    }
   
}
